package com.wipro.training.bank.controller;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.wipro.training.bank.exception.ResourceNotFoundException;
import com.wipro.training.bank.model.Account;
import com.wipro.training.bank.model.Transaction;
import com.wipro.training.bank.service.TransactionService;
/*
Author-Abhinav Kumar
Date-Sep 14, 2024
Time-9:06:39â€¯PM
Project-daily-bank
*/

@RestController
@RequestMapping("/api/account")
public class TransactionController {
	
	private static final Logger logger = LoggerFactory.getLogger(AccountController.class);
	private final TransactionService transactionService;

	public TransactionController(TransactionService transactionService) {
		this.transactionService = transactionService;
	}

	/*
	 * http://localhost:8085/api/account/1128177898/transactions
	 */
	@GetMapping("/{accountNumber}/transactions")
	public ResponseEntity<List<Transaction>> getTransactionDetails(@PathVariable String accountNumber) {
		try {
			List<Transaction> transactions =transactionService.getTransactionDetails(accountNumber);
			return ResponseEntity.ok(transactions);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
		}
		
		
	}
	/*
	 * http://localhost:8085/api/account/neft
	 * {
			  "fromAccount": "1841413158",
			  "toAccount": "1559318849",
			  "amount": 5000.00,
			  "remark": "NEFT Transfer"
			}
	 */
	@PostMapping("/neft")
	public ResponseEntity<Account> performNEFTTransaction(
			@RequestBody Map<String, Object> requestBody) {

		String fromAccountNumber = (String) requestBody.get("fromAccount");
		String toAccountNumber = (String) requestBody.get("toAccount");
		double amount = Double.parseDouble(requestBody.get("amount").toString());
		String remark = (String) requestBody.get("remark");

		try {
			Account updatedAccount = transactionService.performNEFTTransaction(fromAccountNumber, toAccountNumber, amount, remark);
			return ResponseEntity.ok(updatedAccount);
		} catch ( ResourceNotFoundException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
		}
	}

	 @GetMapping("/recent-transaction/{accountNumber}")
		public ResponseEntity<Transaction> getRecentTransaction(@PathVariable String accountNumber) {
		    try {
		        Transaction transaction = transactionService.getRecentTransaction(accountNumber);
		        return ResponseEntity.ok(transaction);
		    } catch (IllegalArgumentException e) {
		        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
		    }
		}
}
