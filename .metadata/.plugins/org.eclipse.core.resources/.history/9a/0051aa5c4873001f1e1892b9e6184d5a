package com.wipro.training.bank.service;

import org.springframework.stereotype.Service;

import com.wipro.training.bank.dao.AccountDetailsDTO;
import com.wipro.training.bank.dao.RegisterRequest;
import com.wipro.training.bank.model.Account;
import com.wipro.training.bank.repository.AccountRepository;
import com.wipro.training.bank.util.EncryptionUtil;

/*
Author - Abhinav Kumar
Date - Sep 13, 2024
Time - 9:36:10 AM
Project - daily-bank
 */

@Service
public class AccountService {

    private final AccountRepository accountRepository;

    // Dependency injection using constructor
    public AccountService(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    /**
     * Opens a new account by generating a 10-digit account number and saving the account.
     */
    public Account openAccount(Account account) {
        // Generate a 10-digit unique account number
        account.setAccountNumber(generateAccountNumber());
        return accountRepository.save(account);
    }
    
    /**
     * Generates a 10-digit unique account number.
     */
    private String generateAccountNumber() {
        // Logic to generate unique 10-digit account number
        return String.valueOf((long) (Math.random() * 1_000_000_000L + 1_000_000_000L));
    }

    /**
     * Registers a user for internet banking by verifying and encrypting passwords.
     */
    public Account registerInternetBanking(RegisterRequest request) {
        // Find the account by the account number
        Account account = accountRepository.findByAccountNumber(request.getAccountNumber());
        
        // Check if the account exists
        if (account != null) {
            // Check if the login and transaction passwords match the confirmed values
            if (request.getLoginPassword().equals(request.getConfirmLoginPassword()) &&
                request.getTransactionPassword().equals(request.getConfirmTransactionPassword())) {

                // Encrypt passwords before saving
                account.setUserId(request.getUserId());
                account.setLoginPassword(EncryptionUtil.encrypt(request.getLoginPassword()));
                account.setTransactionPassword(EncryptionUtil.encrypt(request.getTransactionPassword()));

                // Save the updated account and return
                return accountRepository.save(account);
            } else {
                // Throw an exception if passwords do not match
                throw new IllegalArgumentException("Passwords do not match");
            }
        }
        return null;
    }

    /**
     * Retrieves account details based on the account number and maps it to AccountDetailsDTO.
     */
    public AccountDetailsDTO getAccountDetails(String accountNumber) {
        // Find the account by the account number
        Account account = accountRepository.findByAccountNumber(accountNumber);
        
        // If account is found, map to DTO and return
        if (account != null) {
            AccountDetailsDTO dto = new AccountDetailsDTO();
            dto.setAccountNumber(account.getAccountNumber());
            dto.setUserId(account.getUserId());
            dto.setTitle(account.getPersonalDetails().getTitle());
            dto.setFirstName(account.getPersonalDetails().getFirstName());
            dto.setMiddleName(account.getPersonalDetails().getMiddleName());
            dto.setLastName(account.getPersonalDetails().getLastName());
            dto.setFatherName(account.getPersonalDetails().getFatherName());
            dto.setEmail(account.getPersonalDetails().getEmail());
            dto.setMobile(account.getPersonalDetails().getMobile());
            dto.setAdhar(account.getPersonalDetails().getAdhar());
            dto.setDob(account.getPersonalDetails().getDob());
            dto.setAddressLine1(account.getAddress().getAddressLine1());
            dto.setAddressLine2(account.getAddress().getAddressLine2());
            dto.setLandmark(account.getAddress().getLandmark());
            dto.setCity(account.getAddress().getCity());
            dto.setState(account.getAddress().getState());
            dto.setPincode(account.getAddress().getPincode());

            return dto;
        } else {
            // Return null if no account is found
            return null;
        }
    }
}
